version1:
zero padding skip
CONV、Median、Sobel從SRAM取值都是從display region左上角取值最後回到display region左上角的左邊
version2:
Median、Sobel會記錄計算的值如果下次該運算到來之前display region都沒便會直接輸出紀錄的值
performance: 11,716,688,472.46495 (um^2)*ns

少139個cycle
面積增加1.7W
=>不划算
=>如果不進行zero padding skip，紀錄上次的結果應該是划算的 => 可以減少240個cycle
performance: 11,860,208,785.15282 (um^2)*ns

version3:
version1的改版
clock period改成5.50
design沒有改變，合成在syn.tcl compile_ultra -timing -retime後面加上optimize_netlist -area的優化
=>optimize_netlist -area會進行組合邏輯的優化，將相同的function進行共用，降低合成的面積
performance: 10,999,426,998.61067 (um^2)*ns

***************其他想法***************
如果只有conv可以先講8層出來的value相加再做conv硬體面積可以少、critical path小，latency不會增加
這次要sobel，開8個conv的連加器划算，不在出來時先相加